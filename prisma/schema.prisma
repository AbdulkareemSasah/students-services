// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl         = env("DATABASE_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations// Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

// generator zod {
//   provider          = "prisma-zod-generator"
//   isGenerateSelect  = true
//   isGenerateInclude = true
// }

// API : PROGRES
// DASHBOARD : PROGRES
// SITE : PROGRES
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// API : PROGRES
// DASHBOARD : PROGRES
// SITE : PROGRES
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// API : PROGRES
// DASHBOARD : PROGRES
// SITE : PROGRES
model User {
  id            String                @id @default(cuid())
  name          String?
  email         String?               @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role                  @default(USER)
  accounts      Account[]
  sessions      Session[]
  pages         PageTranslation[]
  articles      ArticleTranslation[]
  categories    CategoryTranslation[]
  Comment       CommentTranslation[]
  orders        Order[]
}

enum Role {
  USER
  AUTHER
  ADMIN
  SUPERUSER
}

// API : PROGRES
// DASHBOARD : PROGRES
// SITE : PROGRES
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model Language {
  id                 String                       @id @default(uuid())
  label              String
  language           String                       @unique
  common             Json
  globals            GlobalTranslation[]
  pages              PageTranslation[]
  categoreis         CategoryTranslation[]
  categoriesServices CategoryServiceTranslation[]
  services           ServiceTranslation[]
  articles           ArticleTranslation[]
  tags               TagTranslation[]
  comments           CommentTranslation[]
  navbarItems        NavbarItemTranslation[]
  dropdownGroups     DropDownGroupTranslation[]
  dropdownItems      DropdownItemTranslation[]
  footers            FooterTranslation[]
  groupFooters       GroupFooterTranslation[]
}

// API : PROGRES
// DASHBOARD : PROGRES
// SITE : PROGRES
model Global {
  id           String              @id @default(uuid())
  translations GlobalTranslation[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

// API : PROGRES
// DASHBOARD : PROGRES
// SITE : PROGRES
model GlobalTranslation {
  id          String   @id @default(uuid())
  language    Language @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang        String
  name        String?
  logo        String?
  favicon     String?
  images      String[]
  description String?
  global      Global   @relation(fields: [globalId], references: [id], onDelete: Cascade)
  globalId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([lang, globalId])
  @@index([globalId])
  @@index([lang])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model SocialLink {
  id     String @id @default(uuid())
  social String
  url    String

  @@unique([social])
  @@index([social])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model NavbarItem {
  id             String                  @id @unique @default(uuid())
  translations   NavbarItemTranslation[]
  dropdownGroups DropDownGroup[]
  dropdownItems  DropdownItem[]
  isDropdown     Boolean                 @default(false)
  forArticle     Boolean                 @default(false)
  forPage        Boolean                 @default(false)
  page           Page?                   @relation(fields: [pageId], references: [id])
  pageId         String?                 @unique
  article        Article?                @relation(fields: [articleId], references: [id])
  articleId      String?                 @unique
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  active         Boolean                 @default(false)

  @@unique([pageId, articleId])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model NavbarItemTranslation {
  id           String      @id @default(uuid())
  name         String
  language     Language    @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang         String
  navbarItem   NavbarItem? @relation(fields: [navbarItemId], references: [id])
  navbarItemId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([lang, navbarItemId])
  @@index([lang])
  @@index([navbarItemId])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model DropDownGroup {
  id            String                     @id @default(uuid())
  translations  DropDownGroupTranslation[]
  navItem       NavbarItem?                @relation(fields: [navItemId], references: [id], onDelete: Cascade)
  navItemId     String?
  dropdownItems DropdownItem[]
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  active        Boolean                    @default(false)

  @@index([navItemId])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model DropDownGroupTranslation {
  id              String         @id @default(uuid())
  name            String
  language        Language       @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang            String
  dropdownGroup   DropDownGroup? @relation(fields: [dropdownGroupId], references: [id])
  dropdownGroupId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([lang, dropdownGroupId])
  @@index([lang])
  @@index([dropdownGroupId])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model DropdownItem {
  id           String                    @id @unique @default(uuid())
  translations DropdownItemTranslation[]
  group        DropDownGroup?            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId      String?
  page         Page?                     @relation(fields: [pageId], references: [id])
  pageId       String?                   @unique
  forGroup     Boolean                   @default(false)
  forArticle   Boolean                   @default(false)
  forPage      Boolean                   @default(false)
  article      Article?                  @relation(fields: [articleId], references: [id])
  articleId    String?                   @unique
  navItem      NavbarItem?               @relation(fields: [navItemId], references: [id], onDelete: Cascade)
  navItemId    String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  active       Boolean                   @default(false)

  @@index([groupId])
  @@index([navItemId])
  @@index([pageId])
  @@index([articleId])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model DropdownItemTranslation {
  id             String        @id @default(uuid())
  name           String
  language       Language      @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang           String
  dropdownItem   DropdownItem? @relation(fields: [dropdownItemId], references: [id])
  dropdownItemId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([lang, dropdownItemId])
  @@index([lang])
  @@index([dropdownItemId])
}

// API : PROGRES
// DASHBOARD : PROGRES
// SITE : PROGRES
model Footer {
  id           String              @id @default(uuid())
  translations FooterTranslation[]
  groups       GroupFooter[]
  articles     Article[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

// API : PROGRES
// DASHBOARD : PROGRES
// SITE : PROGRES
model FooterTranslation {
  id        String   @id @default(uuid())
  language  Language @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang      String
  footer    Footer?  @relation(fields: [footerId], references: [id], onDelete: Cascade)
  footerId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lang, footerId])
  @@index([footerId])
  @@index([lang])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model GroupFooter {
  id           String                   @id @default(uuid())
  translations GroupFooterTranslation[]
  footer       Footer?                  @relation(fields: [footerId], references: [id], onDelete: Cascade)
  footerId     String?
  articles     Article[]
  pages        Page[]
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  active       Boolean                  @default(false)

  @@index([footerId])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model GroupFooterTranslation {
  id            String       @id @default(uuid())
  title         String?
  groupfooter   GroupFooter? @relation(fields: [groupfooterId], references: [id], onDelete: Cascade)
  groupfooterId String?
  language      Language     @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([lang, groupfooterId])
  @@index([lang])
  @@index([groupfooterId])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model Page {
  id            String            @id @unique @default(uuid())
  translations  PageTranslation[]
  navbarItem    NavbarItem?
  dropdownItem  DropdownItem?
  groupFooter   GroupFooter?      @relation(fields: [groupFooterId], references: [id])
  groupFooterId String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  published     Boolean           @default(false)

  @@index([groupFooterId])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model PageTranslation {
  id          String   @id @default(uuid())
  language    Language @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang        String
  author      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  nameInNav   String
  title       String
  description String?
  images      String[]
  blocks      Block[]
  published   Boolean  @default(false)
  page        Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([lang, pageId])
  @@index([pageId])
  @@index([lang])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model Category {
  id           String                @id @default(uuid())
  translations CategoryTranslation[]
  articles     Article[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  active       Boolean               @default(false)
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model CategoryTranslation {
  id          String   @id @default(uuid())
  language    Language @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang        String
  author      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String   @unique
  description String?
  images      String[]
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([lang, categoryId])
  @@index([categoryId])
  @@index([lang])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model Article {
  id            String               @id @unique @default(uuid())
  translations  ArticleTranslation[]
  category      Category?            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String?
  tags          Tag[]
  comments      Comment[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  footer        Footer?              @relation(fields: [footerId], references: [id], onDelete: Cascade)
  footerId      String?
  groupfooter   GroupFooter?         @relation(fields: [groupfooterId], references: [id], onDelete: Cascade)
  groupfooterId String?
  navbarItem    NavbarItem?
  dropdownItem  DropdownItem?
  published     Boolean              @default(false)
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model ArticleTranslation {
  id          String   @id @default(uuid())
  language    Language @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang        String
  author      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  slug        String?  @unique
  published   Boolean  @default(false)
  title       String?
  description String?
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId   String
  images      String[]
  blocks      Block[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([lang, articleId])
  @@index([articleId])
  @@index([lang])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model Tag {
  id           String           @id @default(uuid())
  translations TagTranslation[]
  articles     Article[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  active       Boolean          @default(false)
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model TagTranslation {
  id        String   @id @default(uuid())
  language  Language @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang      String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lang, tagId])
  @@index([tagId])
  @@index([lang])
}

// API : PROGRES
// DASHBOARD : PROGRES
// SITE : PROGRES
model Comment {
  id           String               @id @default(uuid())
  translations CommentTranslation[]
  article      Article              @relation(fields: [articleId], references: [id])
  articleId    String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

// API : PROGRES
// DASHBOARD : PROGRES
// SITE : PROGRES
model CommentTranslation {
  id        String   @id @default(uuid())
  language  Language @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang      String
  author    User?    @relation(fields: [userId], references: [id])
  userId    String?
  name      String?
  body      String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(false)

  @@unique([lang, commentId])
  @@index([commentId])
  @@index([lang])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model Block {
  id                String                      @id @default(uuid())
  type              String?
  content           Json?
  Page              PageTranslation?            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId            String?
  article           ArticleTranslation?         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId         String?
  categoryService   CategoryServiceTranslation? @relation(fields: [categoryServiceId], references: [id], onDelete: Cascade)
  categoryServiceId String?
  service           ServiceTranslation?         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId         String?
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  active            Boolean                     @default(false)
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model CategoryService {
  id           String                       @id @default(uuid())
  services     Service[]
  translations CategoryServiceTranslation[]
  published    Boolean                      @default(false)
  createdAt    DateTime                     @default(now())
  updatedAt    DateTime                     @updatedAt
  active       Boolean                      @default(false)
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model CategoryServiceTranslation {
  id                String          @id @default(uuid())
  language          Language        @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang              String
  name              String          @unique
  descriprion       String?
  images            String[]
  categoryService   CategoryService @relation(fields: [categoryServiceId], references: [id], onDelete: Cascade)
  categoryServiceId String
  blocks            Block[]
  published         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([lang, categoryServiceId])
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model Service {
  id              String               @id @default(uuid())
  CategoryService CategoryService      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String
  translations    ServiceTranslation[]
  orders          Order[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  active          Boolean              @default(false)
}

// API : DONE
// DASHBOARD : PROGRES
// SITE : PROGRES
model ServiceTranslation {
  id          String   @id @default(uuid())
  language    Language @relation(fields: [lang], references: [language], onDelete: Cascade)
  lang        String
  name        String   @unique
  description String?
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   String
  blocks      Block[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([lang, serviceId])
}

// API : PROGRES
// DASHBOARD : PROGRES
// SITE : PROGRES
model Order {
  id                      String   @id @default(uuid())
  name                    String?
  email                   String?
  phone                   String?
  student                 User?    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId               String?
  service                 Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId               String?
  DescriptionOtherService String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}
